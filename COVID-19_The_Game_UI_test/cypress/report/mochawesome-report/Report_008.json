{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2022-08-20T08:23:27.036Z",
    "end": "2022-08-20T08:24:35.808Z",
    "duration": 68772,
    "testsRegistered": 1,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "cfbeeeb7-e13a-4284-9073-48d99eaa8c20",
      "title": "",
      "fullFile": "cypress\\e2e\\BattleFieldPage.cy.js",
      "file": "cypress\\e2e\\BattleFieldPage.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2cae460d-2312-45f2-9f78-74fb96db5840",
          "title": "Battle field: The Beginning",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "New Player should be able to access battle field, answer all questions correctly & view the score in leaderboard",
              "fullTitle": "Battle field: The Beginning New Player should be able to access battle field, answer all questions correctly & view the score in leaderboard",
              "timedOut": null,
              "duration": 68610,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Do a successful user login. This function is defined in support/command.js file\ncy.userLoginSuccessAndGameEntrySuccess('New user').then($name => {\n  let newPlayerName = $name;\n}); // Game Entry\ncy.enterBattleField(); // In \"No second chances\" popup, click Start\ncy.get('#start').should('not.be.disabled').and('have.text', 'Start').click(); // No second chances popup should close. Check for \"The Beginning\" header\ncy.get('#h3_battlefield').should('be.visible').and('have.text', \"The Beginning\"); // URL should be as expected\ncy.url().should('include', '/news'); // Check for the map\ncy.get('nav').should('be.visible'); // Check for the article\ncy.get('article > div.modal-body').should('be.visible'); // Get the question & answer file from fixtures folder\ncy.fixture(\"Question&Answers.json\"); // Loop through to pick questions dynamically from .json file & answer the questions         \nfor (let i = 0; i < _QuestionAnswers.default.length; i = i + 1) {\n  for (let j = 0; j < _QuestionAnswers.default.length; j = j + 1) {\n    cy.get('#question').then($btn => {\n      //cy.log($btn.text());\n      if ($btn.text().includes(_QuestionAnswers.default[j].question)) {\n        // To address same question with different answers.\n        cy.get('#answer_1').then($btn => {\n          for (let k = 0; k < _QuestionAnswers.default[j].correctAnswer.length; k++) {\n            let x = 0; //cy.log($btn.text());\n            if ($btn.text().includes(_QuestionAnswers.default[j].correctAnswer[k])) {\n              cy.get('#answer_1').contains(_QuestionAnswers.default[j].correctAnswer[k]).should('not.be.disabled').click();\n              x = 1;\n            } //cy.log(\"entered k loop\")\n            //cy.log(x);\n\n            cy.task('setX', x);\n            if (x === 1) {\n              break;\n            }\n          }\n        }); //cy.log('Exited k for loop')\n        cy.task('getX').then(x => {\n          //cy.log(x);\n          if (x === 0) {\n            cy.get('#answer_2').then($btn => {\n              for (let l = 0; l < _QuestionAnswers.default[j].correctAnswer.length; l++) {\n                let y = 0; //cy.log($btn.text());\n                if ($btn.text().includes(_QuestionAnswers.default[j].correctAnswer[l])) {\n                  cy.get('#answer_2').contains(_QuestionAnswers.default[j].correctAnswer[l]).should('not.be.disabled').click();\n                  y = 1;\n                } //cy.log(\"entered l loop\")\n                //cy.log(y);\n\n                if (y === 1) {\n                  break;\n                }\n              }\n            });\n          }\n        });\n        cy.get('#img-wfh').should('be.visible');\n        cy.get('#correctModal > .modal-dialog > .modal-content > .modal-header > #staticBackdropLabel').should('be.visible').and('have.text', \"That is correct!\");\n        cy.get('#correctModal > .modal-dialog > .modal-content > .modal-body').should('be.visible').and('includes.text', '\\n        Eliminate the risk of exposure to the COVID-19 virus by keeping a safe distance, and work if possible. For more information about working from home visit Safe Work Australia .\\n      ');\n        cy.get('#continue').should('not.be.disabled').and('have.text', 'Continue...').click({\n          force: true\n        });\n      }\n    });\n    cy.wait(1000);\n  }\n}",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `#question`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `#question`, but never found it.\n    at Context.eval (https://responsivefight.herokuapp.com/__cypress/tests?p=cypress\\e2e\\BattleFieldPage.cy.js:143:12)",
                "diff": null
              },
              "uuid": "8cfbdddf-200e-4027-bb38-1a80142efe3f",
              "parentUUID": "2cae460d-2312-45f2-9f78-74fb96db5840",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "8cfbdddf-200e-4027-bb38-1a80142efe3f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 68610,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "Report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/report/mochawesome-report",
        "reportFilename": "Report",
        "overwrite": false,
        "embeddedScreenshots": true,
        "charts": true,
        "html": true,
        "json": true,
        "reportPageTitle": "HTML Report"
      },
      "version": "6.2.0"
    }
  }
}